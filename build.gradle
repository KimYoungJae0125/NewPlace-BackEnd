plugins {
    id 'org.springframework.boot' version '2.5.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "org.asciidoctor.jvm.convert" version "3.3.2"  //  plugin 추가
    id 'java'
    id 'war'
}

group = 'shop'
archivesBaseName = 'newPlace'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
/*    asciidoctorExt */ 
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.apache.kafka:kafka-streams'
    implementation 'org.springframework.kafka:spring-kafka'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.springframework.security:spring-security-test'

    /* Property Security */
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.4'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'

	/* Inmemory DB Start */    
	/* Redis DB */    
    implementation 'org.springframework.boot:spring-boot-starter-data-redis:2.6.3'
    implementation 'org.springframework.session:spring-session-data-redis:2.6.1'
    implementation ('it.ozimov:embedded-redis:0.7.3') {exclude group: "org.slf4j", module: "slf4j-simple" }

	/* H2 DB */
    runtimeOnly 'com.h2database:h2'
	/* Inmemory DB End */    

	/* API Docs */
	/* Swagger */
/*	implementation 'io.springfox:springfox-boot-starter:3.0.0'	spring-restdocs로 변경 */
	
	/* spring rest Docs */
/*	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor' */
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	

	/* ModelMapper */    
    implementation 'org.modelmapper:modelmapper:2.4.2'

    /* MySql */
    implementation 'mysql:mysql-connector-java:8.0.16'
    
    /* JWT */
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	
	/* Thymeleaf(이메일 템플릿으로 사용) */
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    
}

ext { 
	snippetsDir = file('build/generated-snippets')
}

// test가 진행된 이후 문서 작성
asciidoctor {
	dependsOn test
	inputs.dir snippetsDir 
/*	configurations 'asciidoctorExt' */ 
}

// 작성된 문서를 서버에서 접근할 수 있도록 이동
bootJar {
	dependsOn asciidoctor
	copy {
/*		from ("${asciidoctor.outputDir}/html5") */
		from "${asciidoctor.outputDir}"
		into 'src/main/resources/static/docs'
	}
}

asciidoctor.doFirst {
   delete file('src/main/resources/static/docs')
}

task copyDocument(type: Copy) {
   dependsOn asciidoctor
   from file("build/docs/asciidoc")
   into file("src/main/resources/static/docs")
}

test {
/*	outputs.dir snippetsDir */
    useJUnitPlatform()
}

build {
   dependsOn copyDocument
}